# pip install pycryptodome
from Crypto.PublicKey import RSA
from Crypto.Cipher import PKCS1_OAEP
import base64

n = 128719982421733323364822417633708972139672564763531482016213361798494625781775911705798342171099576553700871838518746912903018170793611862853437249527093576528296951074344654527117087733810452665192580660217972624510885970219771144043100946430501914165538790534236854745495041273592862277366985641626384315017
e = 65537
d = 20666061233219067525896233857849547657867078542531367834575842544574216892379055235491556774406972313319812830689446496140585580558926774508199440614066532986456712250632983010043703244691158444319659267412746787682801153867305479144477720674149368216929897760558970551461131517399750058815247594139120834569
p = 10288316840784167029099306153525200366562124851719293024896186567258855143783419295980155672280186913753503899243267967233221516187456912459877920323310079
q = 12511277054714266790270119033472312381202347570282074046167369391965403631429556361858517585084954396305844845000469059059120711210117491697254193082280823

message = "Ahmed Nouralla"
key = RSA.construct((n, e, d, p, q))
rsa = PKCS1_OAEP.new(key)

ciphertext = rsa.encrypt(message.encode())
plaintext = rsa.decrypt(ciphertext).decode()

# Uncomment to verify correctness 
# print(f"Encrypted Message: {ciphertext}\n")
# print(f"Decrypted Message: {plaintext}")

private_key = key.export_key().decode()
public_key = key.publickey().exportKey().decode()
b64_encrypted_message = base64.b64encode(ciphertext).decode()

# Print public key and the encrypted message in base64
print(public_key)
print(b64_encrypted_message)